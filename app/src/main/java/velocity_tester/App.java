/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package velocity_tester;

import java.io.StringReader;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.networknt.schema.JsonSchema;
import com.networknt.schema.JsonSchemaFactory;
import com.networknt.schema.SpecVersion;
import com.networknt.schema.ValidationMessage;

import org.apache.velocity.app.VelocityEngine;
import org.apache.velocity.exception.MethodInvocationException;

import net.sourceforge.argparse4j.ArgumentParsers;
import net.sourceforge.argparse4j.inf.ArgumentParser;
import net.sourceforge.argparse4j.inf.Namespace;
import org.apache.velocity.VelocityContext;
import spark.Spark;

public class App {
    public static void main(String[] args) throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        JsonSchema schema = getJsonSchemaFromClasspath();

        ArgumentParser parser = ArgumentParsers.newFor("velocity-tester").build().defaultHelp(true)
                .description("Velocity template testing server for AWS Appsync.");
        parser.addArgument("-p", "--port").type(Integer.class).setDefault(4111);

        Namespace ns = parser.parseArgs(args);
        Integer port = ns.getInt("port");
        Properties props = new Properties();
        props.load(Thread.currentThread().getContextClassLoader().getResourceAsStream("velocity.properties"));

        Spark.port(port);
        System.out.println("====================================");
        System.out.printf("Running velocity tester on port %d\n", port);
        System.out.println("====================================");

        Spark.post("/", (req, res) -> {
            try {
                JsonNode node = mapper.readTree(req.bodyAsBytes());
                Set<ValidationMessage> errors = schema.validate(node);

                if (!errors.isEmpty()) {
                    res.status(400);
                    return mapper.writeValueAsBytes(errors);
                }

                TemplateRunDTO dto = mapper.convertValue(node, TemplateRunDTO.class);

                // Start your engines
                VelocityEngine engine = new VelocityEngine();

                engine.setProperties(props);
                engine.init();
                // TODO build context object (prev result)

                Map<String, Object> context = dto.getContext();
                if (context.containsKey("arguments")) {
                    context.put("args", context.get("arguments"));
                }

                Map<String, Object> stash;
                if (context.containsKey("stash")) {
                    stash = (Map<String, Object>) context.get("stash");
                } else {
                    stash = new HashMap<>();
                }

                context.put("stash", stash);
                AppsyncUtils util = new AppsyncUtils((Map<String, Object>) context.get("utilMocks"));

                VelocityContext v = new VelocityContext();
                v.put("ctx", context);
                v.put("context", context);
                v.put("util", util);
                StringWriter writer = new StringWriter();
                engine.evaluate(v, writer, dto.getTemplateName(), new StringReader(dto.getTemplate()));
                TemplateRunResponse response = new TemplateRunResponse(writer.toString(), stash, util.getErrors(),
                        null);
                return mapper.writeValueAsString(response);
            } catch (AppsyncReturnInterrupt e) {
                try {
                    TemplateRunResponse response = new TemplateRunResponse("", null, null, e.getReturnValue());
                    return mapper.writeValueAsString(response);
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            } catch (MethodInvocationException e) {
                if (e.getMethodName().equals("unauthorized")) {
                    return "Unauthorized";
                } else if (e.getMethodName().equals("error") || e.getMethodName().equals("validate")) {
                    return mapper.writeValueAsString(e.getCause());
                } else {
                    System.err.println(e.getMethodName());
                }
                System.err.println(e);
            } catch (Exception e) {
                System.err.println("There was an uncaught error.");
                e.printStackTrace();
            }
            return "Invalid request.";
        });
    }

    public static JsonSchema getJsonSchemaFromClasspath() {
        JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V7);
        return factory
                .getSchema(Thread.currentThread().getContextClassLoader().getResourceAsStream("appsync.schema.json"));
    }
}
